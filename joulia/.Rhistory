y <- c( rbind (rep(1, nrow(train_copulas[[i]]))), rep(2, nrow(train_copulas[[j]])))
#tuned_svm <- tune.svm(x=x_train, y = y ,gamma=2^(-4:4), cost=10^(-3:3))
#best_cost <- tuned_svm$best.parameters$cost
#best_gamma <- tuned_svm$best.parameters$gamma
#summary(tuned_svm)
#model <- svm(x_train, y, type = "C", cost=best_cost, gamma = best_gamma, probability=TRUE)
model <- svm(x_train, y, type = "C", probability=TRUE)
svm_prediction <- predict(model, x_test, decision.values=TRUE, probabilities=TRUE)
pred <- as.numeric(svm_prediction)
#plt <- performance(prediction(attributes(svm_prediction)$decision.values, y), "tpr", "fpr")
#plot(plt)
accuracy <- sum(pred == y) / length(y)
accuracy_list <- c(accuracy_list, accuracy)
#write (paste0(i, " and ", j, " copula, accuracy = ", accuracy), file="copula_svm.txt", append=TRUE)
write (paste0(i, " and ", j, " copula, accuracy = ", accuracy), file="Class_report_simulated_data.txt", append=TRUE)
write.table(as.table(classification_report(pred, y)), sep="\t", row.names=FALSE, col.names=FALSE, file="Class_report_simulated_data.txt", append=TRUE)
write("Predicted values", file="Class_report_simulated_data.txt", append=TRUE)
write(pred, file="Class_report_simulated_data.txt", append=TRUE, ncolumns=200)
write("Real labels", file="Class_report_simulated_data.txt", append=TRUE)
write(y, file="Class_report_simulated_data.txt", append=TRUE, ncolumns=200)
print(paste0(i, " and ", j))
#classification_report(pred, y)
}
}
}
return(accuracy_list)
}
f1_boxplot <- function(copula_1, copulas_list)
{
f1_matrix <- {}
for (i in 1:10)
{
f1 <- {}
train_data <- generate_copulas()
test_data <- generate_copulas()
for (copula in copulas_list)
{
x_train <- rbind (train_data[[copula_1]], train_data[[copula]])
x_test <- rbind (test_data[[copula_1]], test_data[[copula]])
y <- c( rbind (rep(1, nrow(train_data[[copula_1]]))), rep(2, nrow(train_data[[copula]])))
#tuned_svm <- tune.svm(x=x_train, y = y ,gamma=2^(-4:4), cost=10^(-3:3))
#best_cost <- tuned_svm$best.parameters$cost
#best_gamma <- tuned_svm$best.parameters$gamma
#summary(tuned_svm)
#model <- svm(x_train, y, type = "C", cost=best_cost, gamma = best_gamma, probability=TRUE)
model <- svm(x_train, y, type = "C", probability=TRUE)
svm_prediction <- predict(model, x_test, decision.values=TRUE, probabilities=TRUE)
pred <- as.numeric(svm_prediction)
report <- classification_report(pred, y)
f1 <- cbind(f1, report[1,3])
print (paste0("copula ",copula,", iteration ",i))
}
f1_matrix <- rbind(f1_matrix, f1)
}
pdf(paste0(getwd(),"/f1_",copula_1,"_boxplot.pdf"))
boxplot(f1_matrix, names=copulas_list, col = c(2:length(copulas_list)+1), main=paste0("F1_score copula ",copula_1))
dev.off()
return()
}
f1_boxplot(14, list(5,6,9,10,16,21))
library(copula)
library(e1071)
#library(ROCR)
generate_copulas <- function(){
num_parameters <- 100
num_examples <- 1000
train_copulas <- list()
test_copulas <- list()
y <- {}
normCopRho <- list(seq(-0.9,-0.6,length=num_parameters), seq(-0.5,-0.1,length=num_parameters), seq(0.1,0.5,length=num_parameters), seq(0.6,0.9,length=num_parameters))
tCopRho <- list(seq(-0.9,-0.6,length=num_parameters), seq(-0.5,-0.1,length=num_parameters), seq(0.1,0.5,length=num_parameters), seq(0.6,0.9,length=num_parameters))
tCopDf <- list(4,8)
gumbelCopTheta <- list(seq(1.1,5, length=num_parameters), seq(6,10, length=num_parameters),seq(11,100, length=num_parameters))
claytonCopTheta <- list(seq(-0.9,-0.1, length=num_parameters), seq(1,5, length=num_parameters), seq(6,10, length=num_parameters),seq(11,100, length=num_parameters))
frankCopTheta <- list(seq(-100,-10, length=num_parameters), seq(-10,-1, length=num_parameters), seq(1,10, length=num_parameters), seq(11,100, length=num_parameters))
#Gaussian copula
for (rhoList in normCopRho)
{
x <- {}
# generating pair of copulas for train data
for (rho in rhoList)
{
norm.cop <- normalCopula(dim = 2, dispstr = "ex", param = rho)
norm_copula <- rCopula(num_examples, norm.cop)
norm_copula <- t(matrix(t(norm_copula)))
x <- rbind (x, norm_copula)
}
train_copulas[[length(train_copulas)+1]] <- x
}
#t_Copula
for (Df in tCopDf)
{
for (rhoList in tCopRho)
{
x <- {}
for (rho in rhoList)
{
t.cop <- tCopula (dim = 2, dispstr = "ex", param = rho, df = Df)
t_copula <- rCopula(num_examples, t.cop)
t_copula <- t(matrix(t(t_copula)))
x <- rbind (x, t_copula)
}
train_copulas[[length(train_copulas)+1]] <- x
}
}
#Gumbel copula
for (thetaList in gumbelCopTheta)
{
x <- {}
for (theta in thetaList)
{
gumbel.cop <- gumbelCopula(dim = 2, param = theta)
gumbel_copula <- rCopula(num_examples, gumbel.cop)
gumbel_copula <- t(matrix(t(gumbel_copula)))
x <- rbind (x, gumbel_copula)
}
train_copulas[[length(train_copulas)+1]] <- x
}
#Clayton copula
for (thetaList in claytonCopTheta)
{
x <- {}
for (theta in thetaList)
{
clayton.cop <- claytonCopula(dim = 2, param = theta)
clayton_copula <- rCopula(num_examples, clayton.cop)
clayton_copula <- t(matrix(t(clayton_copula)))
x <- rbind (x, clayton_copula)
}
train_copulas[[length(train_copulas)+1]] <- x
}
#Frank copula
for (thetaList in frankCopTheta)
{
x <- {}
for (theta in thetaList)
{
frank.cop <- frankCopula(dim = 2, param = theta)
frank_copula <- rCopula(num_examples, frank.cop)
frank_copula <- t(matrix(t(frank_copula)))
x <- rbind (x, frank_copula)
}
train_copulas[[length(train_copulas)+1]] <- x
}
return (train_copulas)
}
classification_report <- function(pred, y)
{
classification_matrix <- matrix(NA, ncol=3, nrow=3,
dimnames = list(c("class_1", "class_2", "Average"),
c("Precision", "Recall", "F1_score")))
true_positive <- sum(which(y==1) %in% which(pred==1))
true_negative <- sum(which(y==2) %in% which(pred==2))
false_positive <- (sum(pred==1) - true_positive)
false_negative <- (sum(pred==2) - true_negative)
write(paste0("True positives = ", true_positive), file="Class_report_simulated_data.txt", append=TRUE)
write(paste0("True negative = ", true_negative), file="Class_report_simulated_data.txt", append=TRUE)
write(paste0("False positive = ", false_positive), file="Class_report_simulated_data.txt", append=TRUE)
write(paste0("False negative = ", false_negative), file="Class_report_simulated_data.txt", append=TRUE)
precision_1 <- ifelse(is.nan(true_positive / sum(pred == 1)), 0.0, (true_positive / sum(pred == 1)))
precision_2 <- ifelse(is.nan(true_negative / sum(pred == 2)), 0.0, (true_negative / sum(pred == 2)))
recall_1 <- true_positive  / sum(y==1)
recall_2 <- true_negative / sum(y==2)
f1_score_1 <- ifelse(is.nan(2*precision_1*recall_1 / (precision_1+recall_1)), 0.0, (2*precision_1*recall_1 / (precision_1+recall_1)))
f1_score_2 <- ifelse(is.nan(2*precision_2*recall_2 / (precision_2+recall_2)), 0.0, (2*precision_2*recall_2 / (precision_2+recall_2)))
classification_matrix[1,] <- (c(precision_1, recall_1, f1_score_1))
classification_matrix[2,] <- (c(precision_2, recall_2, f1_score_2))
classification_matrix[3,] <- (c(mean(c(precision_1, precision_2)),
mean(c(recall_1, recall_2)),
mean(c(f1_score_1, f1_score_2))))
return (classification_matrix)
}
#SVM
svm_apply <- function(train_copulas, test_copulas){
write("All combinations of copulas with accuracies", file="Class_report_simulated_data.txt", append=FALSE)
accuracy_list <- {}
for (i in 1:length(train_copulas))
{
for (j in 1:length(test_copulas))
{
if (j>i)
{
x_train <- rbind (train_copulas[[i]], train_copulas[[j]])
x_test <- rbind (test_copulas[[i]], test_copulas[[j]])
y <- c( rbind (rep(1, nrow(train_copulas[[i]]))), rep(2, nrow(train_copulas[[j]])))
#tuned_svm <- tune.svm(x=x_train, y = y ,gamma=2^(-4:4), cost=10^(-3:3))
#best_cost <- tuned_svm$best.parameters$cost
#best_gamma <- tuned_svm$best.parameters$gamma
#summary(tuned_svm)
#model <- svm(x_train, y, type = "C", cost=best_cost, gamma = best_gamma, probability=TRUE)
model <- svm(x_train, y, type = "C", probability=TRUE)
svm_prediction <- predict(model, x_test, decision.values=TRUE, probabilities=TRUE)
pred <- as.numeric(svm_prediction)
#plt <- performance(prediction(attributes(svm_prediction)$decision.values, y), "tpr", "fpr")
#plot(plt)
accuracy <- sum(pred == y) / length(y)
accuracy_list <- c(accuracy_list, accuracy)
#write (paste0(i, " and ", j, " copula, accuracy = ", accuracy), file="copula_svm.txt", append=TRUE)
write (paste0(i, " and ", j, " copula, accuracy = ", accuracy), file="Class_report_simulated_data.txt", append=TRUE)
write.table(as.table(classification_report(pred, y)), sep="\t", row.names=FALSE, col.names=FALSE, file="Class_report_simulated_data.txt", append=TRUE)
write("Predicted values", file="Class_report_simulated_data.txt", append=TRUE)
write(pred, file="Class_report_simulated_data.txt", append=TRUE, ncolumns=200)
write("Real labels", file="Class_report_simulated_data.txt", append=TRUE)
write(y, file="Class_report_simulated_data.txt", append=TRUE, ncolumns=200)
print(paste0(i, " and ", j))
#classification_report(pred, y)
}
}
}
return(accuracy_list)
}
f1_boxplot <- function(copula_1, copulas_list)
{
f1_matrix <- {}
for (i in 1:100)
{
f1 <- {}
train_data <- generate_copulas()
test_data <- generate_copulas()
ptm <- proc.time()
for (copula in copulas_list)
{
x_train <- rbind (train_data[[copula_1]], train_data[[copula]])
x_test <- rbind (test_data[[copula_1]], test_data[[copula]])
y <- c( rbind (rep(1, nrow(train_data[[copula_1]]))), rep(2, nrow(train_data[[copula]])))
#tuned_svm <- tune.svm(x=x_train, y = y ,gamma=2^(-4:4), cost=10^(-3:3))
#best_cost <- tuned_svm$best.parameters$cost
#best_gamma <- tuned_svm$best.parameters$gamma
#summary(tuned_svm)
#model <- svm(x_train, y, type = "C", cost=best_cost, gamma = best_gamma, probability=TRUE)
model <- svm(x_train, y, type = "C", probability=TRUE)
svm_prediction <- predict(model, x_test, decision.values=TRUE, probabilities=TRUE)
pred <- as.numeric(svm_prediction)
report <- classification_report(pred, y)
f1 <- cbind(f1, report[1,3])
print (paste0("copula ",copula,", iteration ",i))
}
print (paste0("required time ",(proc.time() - ptm)))
f1_matrix <- rbind(f1_matrix, f1)
}
pdf(paste0(getwd(),"/f1_",copula_1,"_boxplot.pdf"))
boxplot(f1_matrix, names=copulas_list, col = c(2:length(copulas_list)+1), main=paste0("F1_score copula ",copula_1))
dev.off()
return()
}
f1_boxplot(14, list(5,6,9,10,16,21))
f1_boxplot <- function(copula_1, copulas_list)
{
f1_matrix <- {}
for (i in 1:100)
{
f1 <- {}
train_data <- generate_copulas()
test_data <- generate_copulas()
ptm <- proc.time()
for (copula in copulas_list)
{
x_train <- rbind (train_data[[copula_1]], train_data[[copula]])
x_test <- rbind (test_data[[copula_1]], test_data[[copula]])
y <- c( rbind (rep(1, nrow(train_data[[copula_1]]))), rep(2, nrow(train_data[[copula]])))
#tuned_svm <- tune.svm(x=x_train, y = y ,gamma=2^(-4:4), cost=10^(-3:3))
#best_cost <- tuned_svm$best.parameters$cost
#best_gamma <- tuned_svm$best.parameters$gamma
#summary(tuned_svm)
#model <- svm(x_train, y, type = "C", cost=best_cost, gamma = best_gamma, probability=TRUE)
model <- svm(x_train, y, type = "C", probability=TRUE)
svm_prediction <- predict(model, x_test, decision.values=TRUE, probabilities=TRUE)
pred <- as.numeric(svm_prediction)
report <- classification_report(pred, y)
f1 <- cbind(f1, report[1,3])
print (paste0("copula ",copula,", iteration ",i))
}
t <- proc.time() - ptm
print (paste0("required time ",t))
f1_matrix <- rbind(f1_matrix, f1)
}
pdf(paste0(getwd(),"/f1_",copula_1,"_boxplot.pdf"))
boxplot(f1_matrix, names=copulas_list, col = c(2:length(copulas_list)+1), main=paste0("F1_score copula ",copula_1))
dev.off()
return()
}
f1_boxplot(14, list(5,6,9,10,16,21))
proc.time()
proc.time()
proc.time()
proc.time()
f1_boxplot(14, list(5,6,9,10,16,21))
library(copula)
library(e1071)
#library(ROCR)
generate_copulas <- function(){
num_parameters <- 100
num_examples <- 1000
train_copulas <- list()
test_copulas <- list()
y <- {}
normCopRho <- list(seq(-0.9,-0.6,length=num_parameters), seq(-0.5,-0.1,length=num_parameters), seq(0.1,0.5,length=num_parameters), seq(0.6,0.9,length=num_parameters))
tCopRho <- list(seq(-0.9,-0.6,length=num_parameters), seq(-0.5,-0.1,length=num_parameters), seq(0.1,0.5,length=num_parameters), seq(0.6,0.9,length=num_parameters))
tCopDf <- list(4,8)
gumbelCopTheta <- list(seq(1.1,5, length=num_parameters), seq(6,10, length=num_parameters),seq(11,100, length=num_parameters))
claytonCopTheta <- list(seq(-0.9,-0.1, length=num_parameters), seq(1,5, length=num_parameters), seq(6,10, length=num_parameters),seq(11,100, length=num_parameters))
frankCopTheta <- list(seq(-100,-10, length=num_parameters), seq(-10,-1, length=num_parameters), seq(1,10, length=num_parameters), seq(11,100, length=num_parameters))
#Gaussian copula
for (rhoList in normCopRho)
{
x <- {}
# generating pair of copulas for train data
for (rho in rhoList)
{
norm.cop <- normalCopula(dim = 2, dispstr = "ex", param = rho)
norm_copula <- rCopula(num_examples, norm.cop)
norm_copula <- t(matrix(t(norm_copula)))
x <- rbind (x, norm_copula)
}
train_copulas[[length(train_copulas)+1]] <- x
}
#t_Copula
for (Df in tCopDf)
{
for (rhoList in tCopRho)
{
x <- {}
for (rho in rhoList)
{
t.cop <- tCopula (dim = 2, dispstr = "ex", param = rho, df = Df)
t_copula <- rCopula(num_examples, t.cop)
t_copula <- t(matrix(t(t_copula)))
x <- rbind (x, t_copula)
}
train_copulas[[length(train_copulas)+1]] <- x
}
}
#Gumbel copula
for (thetaList in gumbelCopTheta)
{
x <- {}
for (theta in thetaList)
{
gumbel.cop <- gumbelCopula(dim = 2, param = theta)
gumbel_copula <- rCopula(num_examples, gumbel.cop)
gumbel_copula <- t(matrix(t(gumbel_copula)))
x <- rbind (x, gumbel_copula)
}
train_copulas[[length(train_copulas)+1]] <- x
}
#Clayton copula
for (thetaList in claytonCopTheta)
{
x <- {}
for (theta in thetaList)
{
clayton.cop <- claytonCopula(dim = 2, param = theta)
clayton_copula <- rCopula(num_examples, clayton.cop)
clayton_copula <- t(matrix(t(clayton_copula)))
x <- rbind (x, clayton_copula)
}
train_copulas[[length(train_copulas)+1]] <- x
}
#Frank copula
for (thetaList in frankCopTheta)
{
x <- {}
for (theta in thetaList)
{
frank.cop <- frankCopula(dim = 2, param = theta)
frank_copula <- rCopula(num_examples, frank.cop)
frank_copula <- t(matrix(t(frank_copula)))
x <- rbind (x, frank_copula)
}
train_copulas[[length(train_copulas)+1]] <- x
}
return (train_copulas)
}
classification_report <- function(pred, y)
{
classification_matrix <- matrix(NA, ncol=3, nrow=3,
dimnames = list(c("class_1", "class_2", "Average"),
c("Precision", "Recall", "F1_score")))
true_positive <- sum(which(y==1) %in% which(pred==1))
true_negative <- sum(which(y==2) %in% which(pred==2))
false_positive <- (sum(pred==1) - true_positive)
false_negative <- (sum(pred==2) - true_negative)
write(paste0("True positives = ", true_positive), file="Class_report_simulated_data.txt", append=TRUE)
write(paste0("True negative = ", true_negative), file="Class_report_simulated_data.txt", append=TRUE)
write(paste0("False positive = ", false_positive), file="Class_report_simulated_data.txt", append=TRUE)
write(paste0("False negative = ", false_negative), file="Class_report_simulated_data.txt", append=TRUE)
precision_1 <- ifelse(is.nan(true_positive / sum(pred == 1)), 0.0, (true_positive / sum(pred == 1)))
precision_2 <- ifelse(is.nan(true_negative / sum(pred == 2)), 0.0, (true_negative / sum(pred == 2)))
recall_1 <- true_positive  / sum(y==1)
recall_2 <- true_negative / sum(y==2)
f1_score_1 <- ifelse(is.nan(2*precision_1*recall_1 / (precision_1+recall_1)), 0.0, (2*precision_1*recall_1 / (precision_1+recall_1)))
f1_score_2 <- ifelse(is.nan(2*precision_2*recall_2 / (precision_2+recall_2)), 0.0, (2*precision_2*recall_2 / (precision_2+recall_2)))
classification_matrix[1,] <- (c(precision_1, recall_1, f1_score_1))
classification_matrix[2,] <- (c(precision_2, recall_2, f1_score_2))
classification_matrix[3,] <- (c(mean(c(precision_1, precision_2)),
mean(c(recall_1, recall_2)),
mean(c(f1_score_1, f1_score_2))))
return (classification_matrix)
}
#SVM
svm_apply <- function(train_copulas, test_copulas){
write("All combinations of copulas with accuracies", file="Class_report_simulated_data.txt", append=FALSE)
accuracy_list <- {}
for (i in 1:length(train_copulas))
{
for (j in 1:length(test_copulas))
{
if (j>i)
{
x_train <- rbind (train_copulas[[i]], train_copulas[[j]])
x_test <- rbind (test_copulas[[i]], test_copulas[[j]])
y <- c( rbind (rep(1, nrow(train_copulas[[i]]))), rep(2, nrow(train_copulas[[j]])))
#tuned_svm <- tune.svm(x=x_train, y = y ,gamma=2^(-4:4), cost=10^(-3:3))
#best_cost <- tuned_svm$best.parameters$cost
#best_gamma <- tuned_svm$best.parameters$gamma
#summary(tuned_svm)
#model <- svm(x_train, y, type = "C", cost=best_cost, gamma = best_gamma, probability=TRUE)
model <- svm(x_train, y, type = "C", probability=TRUE)
svm_prediction <- predict(model, x_test, decision.values=TRUE, probabilities=TRUE)
pred <- as.numeric(svm_prediction)
#plt <- performance(prediction(attributes(svm_prediction)$decision.values, y), "tpr", "fpr")
#plot(plt)
accuracy <- sum(pred == y) / length(y)
accuracy_list <- c(accuracy_list, accuracy)
#write (paste0(i, " and ", j, " copula, accuracy = ", accuracy), file="copula_svm.txt", append=TRUE)
write (paste0(i, " and ", j, " copula, accuracy = ", accuracy), file="Class_report_simulated_data.txt", append=TRUE)
write.table(as.table(classification_report(pred, y)), sep="\t", row.names=FALSE, col.names=FALSE, file="Class_report_simulated_data.txt", append=TRUE)
write("Predicted values", file="Class_report_simulated_data.txt", append=TRUE)
write(pred, file="Class_report_simulated_data.txt", append=TRUE, ncolumns=200)
write("Real labels", file="Class_report_simulated_data.txt", append=TRUE)
write(y, file="Class_report_simulated_data.txt", append=TRUE, ncolumns=200)
print(paste0(i, " and ", j))
#classification_report(pred, y)
}
}
}
return(accuracy_list)
}
f1_boxplot <- function(copula_1, copulas_list)
{
f1_matrix <- {}
for (i in 1:100)
{
f1 <- {}
train_data <- generate_copulas()
test_data <- generate_copulas()
ptm <- proc.time()
for (copula in copulas_list)
{
x_train <- rbind (train_data[[copula_1]], train_data[[copula]])
x_test <- rbind (test_data[[copula_1]], test_data[[copula]])
y <- c( rbind (rep(1, nrow(train_data[[copula_1]]))), rep(2, nrow(train_data[[copula]])))
tuned_svm <- tune.svm(x=x_train, y = y ,gamma=2^(-4:4), cost=10^(-3:3))
best_cost <- tuned_svm$best.parameters$cost
best_gamma <- tuned_svm$best.parameters$gamma
#summary(tuned_svm)
model <- svm(x_train, y, type = "C", cost=best_cost, gamma = best_gamma, probability=TRUE)
#model <- svm(x_train, y, type = "C", probability=TRUE)
svm_prediction <- predict(model, x_test, decision.values=TRUE, probabilities=TRUE)
pred <- as.numeric(svm_prediction)
report <- classification_report(pred, y)
f1 <- cbind(f1, report[1,3])
print (paste0("copula ",copula,", iteration ",i))
}
t <- proc.time() - ptm
print (paste0("required time ",t))
f1_matrix <- rbind(f1_matrix, f1)
}
pdf(paste0(getwd(),"/f1_",copula_1,"_boxplot.pdf"))
boxplot(f1_matrix, names=copulas_list, col = c(2:length(copulas_list)+1), main=paste0("F1_score copula ",copula_1))
dev.off()
return()
}
f1_boxplot <- function(copula_1, copulas_list)
{
f1_matrix <- {}
for (i in 1:10)
{
f1 <- {}
train_data <- generate_copulas()
test_data <- generate_copulas()
ptm <- proc.time()
for (copula in copulas_list)
{
x_train <- rbind (train_data[[copula_1]], train_data[[copula]])
x_test <- rbind (test_data[[copula_1]], test_data[[copula]])
y <- c( rbind (rep(1, nrow(train_data[[copula_1]]))), rep(2, nrow(train_data[[copula]])))
tuned_svm <- tune.svm(x=x_train, y = y ,gamma=2^(-4:4), cost=10^(-3:3))
best_cost <- tuned_svm$best.parameters$cost
best_gamma <- tuned_svm$best.parameters$gamma
#summary(tuned_svm)
model <- svm(x_train, y, type = "C", cost=best_cost, gamma = best_gamma, probability=TRUE)
#model <- svm(x_train, y, type = "C", probability=TRUE)
svm_prediction <- predict(model, x_test, decision.values=TRUE, probabilities=TRUE)
pred <- as.numeric(svm_prediction)
report <- classification_report(pred, y)
f1 <- cbind(f1, report[1,3])
print (paste0("copula ",copula,", iteration ",i))
}
t <- proc.time() - ptm
print (paste0("required time ",t))
f1_matrix <- rbind(f1_matrix, f1)
}
pdf(paste0(getwd(),"/f1_",copula_1,"_boxplot.pdf"))
boxplot(f1_matrix, names=copulas_list, col = c(2:length(copulas_list)+1), main=paste0("F1_score copula ",copula_1))
dev.off()
return()
}
f1_boxplot(14, list(5,6,9,10,16,21))
f1_boxplot(19, list(2,6,9,10,21))
f1_boxplot(20, list(3,7,8,11,12,13,17))
f1_boxplot(23, list(2,6,9,10,16))
